import org.aspectjml.ajmlrac.runtime.*;
public privileged aspect AspectJMLRac$JMLRacPost4Project {

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final battleship.Destroyer object$rac): (execution( * battleship.Destroyer..*+.*(..))
          || execution(battleship.Destroyer..*+.new(..))
          || execution( * battleship.Destroyer+.*(..))
          || execution(battleship.Destroyer+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * battleship.Destroyer..*+.*(..))
          || execution(battleship.Destroyer..*+.new(..))
          || execution( * battleship.Destroyer+.*(..))
          || execution(battleship.Destroyer+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Destroyer$216fb976_4033_4440_8dc2_a16a15167fdb{
  before(): (execution( * battleship.Destroyer..*+.*(..))
          || execution(battleship.Destroyer..*+.new(..))
          || execution( * battleship.Destroyer+.*(..))
          || execution(battleship.Destroyer+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final battleship.Fragata object$rac): (execution( * battleship.Fragata..*+.*(..))
          || execution(battleship.Fragata..*+.new(..))
          || execution( * battleship.Fragata+.*(..))
          || execution(battleship.Fragata+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * battleship.Fragata..*+.*(..))
          || execution(battleship.Fragata..*+.new(..))
          || execution( * battleship.Fragata+.*(..))
          || execution(battleship.Fragata+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Fragata$86751673_af50_46b7_bcbe_0919650bc822{
  before(): (execution( * battleship.Fragata..*+.*(..))
          || execution(battleship.Fragata..*+.new(..))
          || execution( * battleship.Fragata+.*(..))
          || execution(battleship.Fragata+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final battleship.Jogador object$rac): (execution( * battleship.Jogador..*+.*(..))
          || execution(battleship.Jogador..*+.new(..))
          || execution( * battleship.Jogador+.*(..))
          || execution(battleship.Jogador+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * battleship.Jogador..*+.*(..))
          || execution(battleship.Jogador..*+.new(..))
          || execution( * battleship.Jogador+.*(..))
          || execution(battleship.Jogador+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Jogador$8beb3bc9_f9a4_44c3_aeec_6e20f321a929{
  before(): (execution( * battleship.Jogador..*+.*(..))
          || execution(battleship.Jogador..*+.new(..))
          || execution( * battleship.Jogador+.*(..))
          || execution(battleship.Jogador+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final battleship.Jogo object$rac): (execution( * battleship.Jogo..*+.*(..))
          || execution(battleship.Jogo..*+.new(..))
          || execution( * battleship.Jogo+.*(..))
          || execution(battleship.Jogo+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * battleship.Jogo..*+.*(..))
          || execution(battleship.Jogo..*+.new(..))
          || execution( * battleship.Jogo+.*(..))
          || execution(battleship.Jogo+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Jogo$a033621a_5ec8_41d4_8688_36103fda8523{
  before(): (execution( * battleship.Jogo..*+.*(..))
          || execution(battleship.Jogo..*+.new(..))
          || execution( * battleship.Jogo+.*(..))
          || execution(battleship.Jogo+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final battleship.ListaInvalidaException object$rac): (execution( * battleship.ListaInvalidaException..*+.*(..))
          || execution(battleship.ListaInvalidaException..*+.new(..))
          || execution( * battleship.ListaInvalidaException+.*(..))
          || execution(battleship.ListaInvalidaException+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * battleship.ListaInvalidaException..*+.*(..))
          || execution(battleship.ListaInvalidaException..*+.new(..))
          || execution( * battleship.ListaInvalidaException+.*(..))
          || execution(battleship.ListaInvalidaException+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final battleship.Navio object$rac): (execution( * battleship.Navio..*+.*(..))
          || execution(battleship.Navio..*+.new(..))
          || execution( * battleship.Navio+.*(..))
          || execution(battleship.Navio+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * battleship.Navio..*+.*(..))
          || execution(battleship.Navio..*+.new(..))
          || execution( * battleship.Navio+.*(..))
          || execution(battleship.Navio+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Navio$48d8f130_a041_48f8_8fc1_784b0d082a87{
  before(): (execution( * battleship.Navio..*+.*(..))
          || execution(battleship.Navio..*+.new(..))
          || execution( * battleship.Navio+.*(..))
          || execution(battleship.Navio+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final battleship.Pontuacao object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws Exception : (execution(* battleship.Pontuacao..*+.*(..) throws Exception) ||
    execution(battleship.Pontuacao..*+.new(..) throws Exception) ||
execution(* battleship.Pontuacao+.*(..) throws Exception) ||
    execution(battleship.Pontuacao+.new(..) throws Exception)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof Exception) {
      throw (Exception)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final battleship.Pontuacao object$rac): (execution( * battleship.Pontuacao..*+.*(..))
          || execution(battleship.Pontuacao..*+.new(..))
          || execution( * battleship.Pontuacao+.*(..))
          || execution(battleship.Pontuacao+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * battleship.Pontuacao..*+.*(..))
          || execution(battleship.Pontuacao..*+.new(..))
          || execution( * battleship.Pontuacao+.*(..))
          || execution(battleship.Pontuacao+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Pontuacao$2ec9a745_937e_43e4_86e6_b736cce3c8dc{
  before(): (execution( * battleship.Pontuacao..*+.*(..))
          || execution(battleship.Pontuacao..*+.new(..))
          || execution( * battleship.Pontuacao+.*(..))
          || execution(battleship.Pontuacao+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final battleship.Principal object$rac): (execution( * battleship.Principal..*+.*(..))
          || execution(battleship.Principal..*+.new(..))
          || execution( * battleship.Principal+.*(..))
          || execution(battleship.Principal+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * battleship.Principal..*+.*(..))
          || execution(battleship.Principal..*+.new(..))
          || execution( * battleship.Principal+.*(..))
          || execution(battleship.Principal+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final battleship.Submarino object$rac): (execution( * battleship.Submarino..*+.*(..))
          || execution(battleship.Submarino..*+.new(..))
          || execution( * battleship.Submarino+.*(..))
          || execution(battleship.Submarino+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * battleship.Submarino..*+.*(..))
          || execution(battleship.Submarino..*+.new(..))
          || execution( * battleship.Submarino+.*(..))
          || execution(battleship.Submarino+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Submarino$07f51461_eacc_4a63_9e03_7b05a19c1bb4{
  before(): (execution( * battleship.Submarino..*+.*(..))
          || execution(battleship.Submarino..*+.new(..))
          || execution( * battleship.Submarino+.*(..))
          || execution(battleship.Submarino+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final telas.Ranking object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws battleship.ListaInvalidaException : (execution(* telas.Ranking..*+.*(..) throws battleship.ListaInvalidaException) ||
    execution(telas.Ranking..*+.new(..) throws battleship.ListaInvalidaException) ||
execution(* telas.Ranking+.*(..) throws battleship.ListaInvalidaException) ||
    execution(telas.Ranking+.new(..) throws battleship.ListaInvalidaException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof battleship.ListaInvalidaException) {
      throw (battleship.ListaInvalidaException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final telas.Ranking object$rac): (execution( * telas.Ranking..*+.*(..))
          || execution(telas.Ranking..*+.new(..))
          || execution( * telas.Ranking+.*(..))
          || execution(telas.Ranking+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * telas.Ranking..*+.*(..))
          || execution(telas.Ranking..*+.new(..))
          || execution( * telas.Ranking+.*(..))
          || execution(telas.Ranking+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Ranking$35d5d8e3_c6b8_4881_a0b5_76b95a168ce2{
  before(): (execution( * telas.Ranking..*+.*(..))
          || execution(telas.Ranking..*+.new(..))
          || execution( * telas.Ranking+.*(..))
          || execution(telas.Ranking+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final telas.Tabuleiro object$rac): (execution( * telas.Tabuleiro..*+.*(..))
          || execution(telas.Tabuleiro..*+.new(..))
          || execution( * telas.Tabuleiro+.*(..))
          || execution(telas.Tabuleiro+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * telas.Tabuleiro..*+.*(..))
          || execution(telas.Tabuleiro..*+.new(..))
          || execution( * telas.Tabuleiro+.*(..))
          || execution(telas.Tabuleiro+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Tabuleiro$5082cbfd_c629_4172_b764_c5e82fc5acf9{
  before(): (execution( * telas.Tabuleiro..*+.*(..))
          || execution(telas.Tabuleiro..*+.new(..))
          || execution( * telas.Tabuleiro+.*(..))
          || execution(telas.Tabuleiro+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final telas.TelaInicial object$rac): (execution( * telas.TelaInicial..*+.*(..))
          || execution(telas.TelaInicial..*+.new(..))
          || execution( * telas.TelaInicial+.*(..))
          || execution(telas.TelaInicial+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * telas.TelaInicial..*+.*(..))
          || execution(telas.TelaInicial..*+.new(..))
          || execution( * telas.TelaInicial+.*(..))
          || execution(telas.TelaInicial+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

}