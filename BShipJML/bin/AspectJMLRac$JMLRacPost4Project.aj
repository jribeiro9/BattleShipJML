import org.aspectjml.ajmlrac.runtime.*;
public privileged aspect AspectJMLRac$JMLRacPost4Project {

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final battleship.Destroyer object$rac): (execution( * battleship.Destroyer..*+.*(..))
          || execution(battleship.Destroyer..*+.new(..))
          || execution( * battleship.Destroyer+.*(..))
          || execution(battleship.Destroyer+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * battleship.Destroyer..*+.*(..))
          || execution(battleship.Destroyer..*+.new(..))
          || execution( * battleship.Destroyer+.*(..))
          || execution(battleship.Destroyer+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final battleship.Fragata object$rac): (execution( * battleship.Fragata..*+.*(..))
          || execution(battleship.Fragata..*+.new(..))
          || execution( * battleship.Fragata+.*(..))
          || execution(battleship.Fragata+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * battleship.Fragata..*+.*(..))
          || execution(battleship.Fragata..*+.new(..))
          || execution( * battleship.Fragata+.*(..))
          || execution(battleship.Fragata+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final battleship.Navio object$rac): (execution( * battleship.Navio..*+.*(..))
          || execution(battleship.Navio..*+.new(..))
          || execution( * battleship.Navio+.*(..))
          || execution(battleship.Navio+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * battleship.Navio..*+.*(..))
          || execution(battleship.Navio..*+.new(..))
          || execution( * battleship.Navio+.*(..))
          || execution(battleship.Navio+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final battleship.Principal object$rac): (execution( * battleship.Principal..*+.*(..))
          || execution(battleship.Principal..*+.new(..))
          || execution( * battleship.Principal+.*(..))
          || execution(battleship.Principal+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * battleship.Principal..*+.*(..))
          || execution(battleship.Principal..*+.new(..))
          || execution( * battleship.Principal+.*(..))
          || execution(battleship.Principal+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final battleship.Submarino object$rac): (execution( * battleship.Submarino..*+.*(..))
          || execution(battleship.Submarino..*+.new(..))
          || execution( * battleship.Submarino+.*(..))
          || execution(battleship.Submarino+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * battleship.Submarino..*+.*(..))
          || execution(battleship.Submarino..*+.new(..))
          || execution( * battleship.Submarino+.*(..))
          || execution(battleship.Submarino+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

}